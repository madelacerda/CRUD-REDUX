{"ast":null,"code":"import { AGREGAR_PRODUCTO, AGREGAR_PRODUCTO_EXITO, AGREGAR_PRODUCTO_ERROR, COMENZAR_DESCARGA_PRODUCTOS, DESCARGA_PRODUCTOS_ERROR, DESCARGA_PRODUCTOS_EXITO, OBTENER_PRODUCTO_ELIMINAR, PRODUCTO_ELIMINADO_EXITO, PRODUCTO_ELIMINADO_ERROR, OBTENER_PRODUCTO_EDITAR, PRODUCTO_EDITADO_EXITO, PRODUCTO_EDITADO_ERROR, COMENZAR_EDICION_PRODUCTO } from \"../types\";\nimport clienteAxios from \"../config/axios\";\nimport Swal from \"sweetalert2\"; //Crear nuevos productos\n\nexport function crearNuevoProductoAction(producto) {\n  return async dispatch => {\n    dispatch(agregarProducto());\n\n    try {\n      //Insertar en la API\n      await clienteAxios.post(\"/productos\", producto); //Si todo sale bien actualizar el state\n\n      dispatch(agregarProductoExito(producto)); //Alerta\n\n      Swal.fire(\"Correcto\", \"El producto se agrego correctamente\", \"success\");\n    } catch (error) {\n      console.log(error);\n      dispatch(agregarProductoError(true)); //Alerta de error\n\n      Swal.fire({\n        icon: \"error\",\n        title: \"Hubo un error,\",\n        text: \"Hubo un error, intenta nuevamente\"\n      });\n    }\n  };\n}\n\nconst agregarProducto = () => ({\n  type: AGREGAR_PRODUCTO,\n  payload: true\n}); // Si el producto se guarda en la base de datos\n\n\nconst agregarProductoExito = producto => ({\n  type: AGREGAR_PRODUCTO_EXITO,\n  payload: producto\n}); // si hubo un error\n\n\nconst agregarProductoError = estado => ({\n  type: AGREGAR_PRODUCTO_ERROR,\n  payload: estado\n}); //Funcion que descarga los productos de la base de datos\n\n\nexport function obtenerProductiosAction() {\n  return async dispatch => {\n    dispatch(descargarProductos());\n\n    try {\n      const respuesta = await clienteAxios.get(\"/productos\");\n      dispatch(descargaProductosExitosa(respuesta.data));\n    } catch (error) {\n      console.log(error);\n      dispatch(descargaProductosError());\n    }\n  };\n}\n\nconst descargarProductos = () => ({\n  type: COMENZAR_DESCARGA_PRODUCTOS,\n  payload: true\n});\n\nconst descargaProductosExitosa = productos => ({\n  type: DESCARGA_PRODUCTOS_EXITO,\n  payload: productos\n});\n\nconst descargaProductosError = () => ({\n  type: DESCARGA_PRODUCTOS_ERROR,\n  payload: true\n}); //Seleciona y elimina el producto\n\n\nexport function borrarProductoAction(id) {\n  return async dispatch => {\n    dispatch(obtenerProductoEliminar(id));\n\n    try {\n      await clienteAxios.delete(`/productos/${id}`);\n      dispatch(eliminarProductoExito()); //Si se elimina mostrar alerta\n\n      Swal.fire(\"Eliminado!\", \"el producto fue eliminado.\", \"success\");\n    } catch (error) {\n      console.log(error);\n      dispatch(eliminarProductoError());\n    }\n  };\n}\nexport const obtenerProductoEliminar = id => ({\n  type: OBTENER_PRODUCTO_ELIMINAR,\n  payload: id\n});\n\nconst eliminarProductoExito = () => ({\n  type: PRODUCTO_ELIMINADO_EXITO\n});\n\nconst eliminarProductoError = () => ({\n  type: PRODUCTO_ELIMINADO_ERROR,\n  payload: true\n}); //Colocar producto en edicion\n\n\nexport function obtenerProductoEditar(producto) {\n  return dispatch => {\n    dispatch(obtenerProductosAction(producto));\n  };\n}\n\nconst obtenerProductosAction = producto => ({\n  type: OBTENER_PRODUCTO_EDITAR,\n  payload: producto\n}); //Edita un registro en la api y state\n\n\nexport function editarProductoAction(producto) {\n  return async dispatch => {\n    dispatch(editarProducto());\n\n    try {\n      await clienteAxios.put(`/productos/${producto.id}`, producto);\n      dispatch(editarProductoExito(producto));\n    } catch (error) {\n      dispatch(editarProductoError());\n    }\n  };\n}\n\nconst editarProducto = () => ({\n  type: COMENZAR_EDICION_PRODUCTO\n});\n\nconst editarProductoExito = producto => ({\n  type: PRODUCTO_EDITADO_EXITO,\n  payload: producto\n});\n\nconst editarProductoError = () => ({\n  type: PRODUCTO_EDITADO_ERROR,\n  payload: true\n});","map":{"version":3,"sources":["C:/Users/Matias de la cerda/Desktop/Redux/crudredux/src/actions/productoActions.js"],"names":["AGREGAR_PRODUCTO","AGREGAR_PRODUCTO_EXITO","AGREGAR_PRODUCTO_ERROR","COMENZAR_DESCARGA_PRODUCTOS","DESCARGA_PRODUCTOS_ERROR","DESCARGA_PRODUCTOS_EXITO","OBTENER_PRODUCTO_ELIMINAR","PRODUCTO_ELIMINADO_EXITO","PRODUCTO_ELIMINADO_ERROR","OBTENER_PRODUCTO_EDITAR","PRODUCTO_EDITADO_EXITO","PRODUCTO_EDITADO_ERROR","COMENZAR_EDICION_PRODUCTO","clienteAxios","Swal","crearNuevoProductoAction","producto","dispatch","agregarProducto","post","agregarProductoExito","fire","error","console","log","agregarProductoError","icon","title","text","type","payload","estado","obtenerProductiosAction","descargarProductos","respuesta","get","descargaProductosExitosa","data","descargaProductosError","productos","borrarProductoAction","id","obtenerProductoEliminar","delete","eliminarProductoExito","eliminarProductoError","obtenerProductoEditar","obtenerProductosAction","editarProductoAction","editarProducto","put","editarProductoExito","editarProductoError"],"mappings":"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","sourcesContent":["import {\r\n  AGREGAR_PRODUCTO,\r\n  AGREGAR_PRODUCTO_EXITO,\r\n  AGREGAR_PRODUCTO_ERROR,\r\n  COMENZAR_DESCARGA_PRODUCTOS,\r\n  DESCARGA_PRODUCTOS_ERROR,\r\n  DESCARGA_PRODUCTOS_EXITO,\r\n  OBTENER_PRODUCTO_ELIMINAR,\r\n  PRODUCTO_ELIMINADO_EXITO,\r\n  PRODUCTO_ELIMINADO_ERROR,\r\n  OBTENER_PRODUCTO_EDITAR,\r\n  PRODUCTO_EDITADO_EXITO,\r\n  PRODUCTO_EDITADO_ERROR,\r\n  COMENZAR_EDICION_PRODUCTO,\r\n} from \"../types\";\r\nimport clienteAxios from \"../config/axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\n//Crear nuevos productos\r\nexport function crearNuevoProductoAction(producto) {\r\n  return async (dispatch) => {\r\n    dispatch(agregarProducto());\r\n\r\n    try {\r\n      //Insertar en la API\r\n      await clienteAxios.post(\"/productos\", producto);\r\n\r\n      //Si todo sale bien actualizar el state\r\n      dispatch(agregarProductoExito(producto));\r\n\r\n      //Alerta\r\n      Swal.fire(\"Correcto\", \"El producto se agrego correctamente\", \"success\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(agregarProductoError(true));\r\n\r\n      //Alerta de error\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"Hubo un error,\",\r\n        text: \"Hubo un error, intenta nuevamente\",\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nconst agregarProducto = () => ({\r\n  type: AGREGAR_PRODUCTO,\r\n  payload: true,\r\n});\r\n\r\n// Si el producto se guarda en la base de datos\r\nconst agregarProductoExito = (producto) => ({\r\n  type: AGREGAR_PRODUCTO_EXITO,\r\n  payload: producto,\r\n});\r\n// si hubo un error\r\n\r\nconst agregarProductoError = (estado) => ({\r\n  type: AGREGAR_PRODUCTO_ERROR,\r\n  payload: estado,\r\n});\r\n\r\n//Funcion que descarga los productos de la base de datos\r\nexport function obtenerProductiosAction() {\r\n  return async (dispatch) => {\r\n    dispatch(descargarProductos());\r\n\r\n    try {\r\n      const respuesta = await clienteAxios.get(\"/productos\");\r\n      dispatch(descargaProductosExitosa(respuesta.data));\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(descargaProductosError());\r\n    }\r\n  };\r\n}\r\n\r\nconst descargarProductos = () => ({\r\n  type: COMENZAR_DESCARGA_PRODUCTOS,\r\n  payload: true,\r\n});\r\n\r\nconst descargaProductosExitosa = (productos) => ({\r\n  type: DESCARGA_PRODUCTOS_EXITO,\r\n  payload: productos,\r\n});\r\n\r\nconst descargaProductosError = () => ({\r\n  type: DESCARGA_PRODUCTOS_ERROR,\r\n  payload: true,\r\n});\r\n\r\n//Seleciona y elimina el producto\r\nexport function borrarProductoAction(id) {\r\n  return async (dispatch) => {\r\n    dispatch(obtenerProductoEliminar(id));\r\n\r\n    try {\r\n      await clienteAxios.delete(`/productos/${id}`);\r\n\r\n      dispatch(eliminarProductoExito());\r\n      //Si se elimina mostrar alerta\r\n      Swal.fire(\"Eliminado!\", \"el producto fue eliminado.\", \"success\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch(eliminarProductoError());\r\n    }\r\n  };\r\n}\r\n\r\nexport const obtenerProductoEliminar = (id) => ({\r\n  type: OBTENER_PRODUCTO_ELIMINAR,\r\n  payload: id,\r\n});\r\n\r\nconst eliminarProductoExito = () => ({\r\n  type: PRODUCTO_ELIMINADO_EXITO,\r\n});\r\n\r\nconst eliminarProductoError = () => ({\r\n  type: PRODUCTO_ELIMINADO_ERROR,\r\n  payload: true,\r\n});\r\n\r\n//Colocar producto en edicion\r\nexport function obtenerProductoEditar(producto) {\r\n  return (dispatch) => {\r\n    dispatch(obtenerProductosAction(producto));\r\n  };\r\n}\r\n\r\nconst obtenerProductosAction = (producto) => ({\r\n  type: OBTENER_PRODUCTO_EDITAR,\r\n  payload: producto,\r\n});\r\n\r\n//Edita un registro en la api y state\r\nexport function editarProductoAction(producto) {\r\n  return async (dispatch) => {\r\n    dispatch(editarProducto());\r\n    try {\r\n      await clienteAxios.put(`/productos/${producto.id}`, producto);\r\n      dispatch(editarProductoExito(producto));\r\n    } catch (error) {\r\n      dispatch(editarProductoError());\r\n    }\r\n  };\r\n}\r\n\r\nconst editarProducto = () => ({\r\n  type: COMENZAR_EDICION_PRODUCTO,\r\n});\r\n\r\nconst editarProductoExito = (producto) => ({\r\n  type: PRODUCTO_EDITADO_EXITO,\r\n  payload: producto,\r\n});\r\n\r\nconst editarProductoError = () => ({\r\n  type: PRODUCTO_EDITADO_ERROR,\r\n  payload: true,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}